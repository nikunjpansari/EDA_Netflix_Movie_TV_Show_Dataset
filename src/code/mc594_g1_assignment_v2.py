# -*- coding: utf-8 -*-
"""MC594_G1_Assignment_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqVYNmyUiKTicuGgWEIpMZ8cQejhOmpE

# Data Visulisation for NETFLIX & TV Show dataset

## Tasks

1.   Understand the dataset
2.   Perform data visualization
3.   Create final summary report
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Importing and reading the dataset
info = pd.read_csv(r'/content/sample_data/netflix_titles.csv')
info.head()

#tells us about the rows and columns of the dataset
info.shape

#tells us the basic stats about our columns
info.describe()

#shows us the count and datatypes of our columns
info.info()

#checking for missing values
info.isna().sum()

"""## Installing Pandas profiling library for better visualisation"""

!pip install -U pandas-profiling

from pandas_profiling import ProfileReport
ProfileReport(info)

#convert the data type from object to datetime64
info['date_added']=pd.to_datetime(info['date_added'])

info.head()

"""# Data cleaning"""

info.fillna({'rating':'NR','cast':'unavailable','country':'unavailable','director':'unavailable'},inplace=True)
info.isna().sum()

"""#### For NULL in date_added , missing date_added is to be substituted in the most recent date from date_added . This is because the Netflix has the tendency to add more content over the time."""

info[info.date_added.isnull()]

most_recent_entry_date=info['date_added'].max()
info.fillna({'date_added':most_recent_entry_date},inplace=True)

info[info.show_id=='s6067']

info[info.duration.isnull()]

"""Check to make sure there is no other content with the same director to avoid accidental overwriting"""

info[info.director =='Louis C.K.'].head()

"""## Overwrite and check"""

info.loc[info['director'] == 'Louis C.K.','duration']= info['rating']
info[info.director =='Louis C.K.'].head()

"""## Second overwrite and check"""

info.loc[info['director'] == 'Louis C.K.','duration']= 'unavailable'
info[info.director =='Louis C.K.'].head()

info.loc[info['director'] == 'Louis C.K.','rating']= 'NR'
info[info.director =='Louis C.K.'].head()

"""# Visualizations"""

sns.countplot(x='type',data = info)
plt.title("CountPlot for Movie Type V/s Count")

info['country'].value_counts().head(10)

plt.figure(figsize = (12,8))
sns.countplot(x='rating',data = info)
plt.title("CountPlot for different rating type")

plt.figure(figsize=(16,6))
sns.scatterplot(x='rating',y='type',data = info)
plt.title("scatterplot for Movie & TV_Show type V/s different ratings")

plt.figure(figsize = (10,6))
sns.countplot(x='rating',data = info,hue='type')
plt.title("countplot for Movie & TV_Show type V/s different ratings")

import pandas as pd
import matplotlib.pyplot as plt

# Load the Netflix dataset
df = pd.read_csv(r'/content/sample_data/netflix_titles.csv')

# Extract the required columns
df_ratings = df[['rating', 'show_id']]

# Group the shows by rating and count the number of shows in each category
df_ratings_count = df_ratings.groupby('rating').count()

# Plot a pie chart of the ratings count
plt.pie(df_ratings_count, labels=df_ratings_count.index, autopct='%1.1f%%')
plt.title('Netflix Show Ratings')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

def my_autopct(pct):
    return ('%1.1f%%' % pct) if pct > 3 else ''

info.fillna('nikunjam',inplace=True)
colors = sns.color_palette('coolwarm')[0:5]
di=Counter(info.rating)
data=[x[1] for x in di.items() if x[0] not in ['74 min','84 min','66 min','nikunjam']]
_=sum(data)
labels=['{:.2f}%    '.format((x[1]/_)*100)+str(x[0]) for x in di.items() if x[0] not in ['74 min','84 min','66 min','nikunjam']]
plt.figure(figsize=(10,10))
#create pie chart
plt.pie(data, labels = labels, colors = colors,textprops={'color':'black'} ,autopct=my_autopct,labeldistance=None,pctdistance=0.8,explode=[0 for i in range(len(data))])
plt.legend(bbox_to_anchor=(1,0), loc="lower right", bbox_transform=plt.gcf().transFigure,fontsize=10,facecolor='green')
plt.title("Pie-Chart for different ratings",size=20)
plt.show()

#Kids TV shows on Netflix
tag = "Kids' TV" 
info["relevant"] = info['listed_in'].fillna("").apply(lambda x : 1 if tag.lower() in x.lower() else 0)
com = info[info["relevant"] == 1]
com[com["country"] == "United States"][["title", "country","release_year"]].head(10)

info_countries = pd.DataFrame(info.country.value_counts().reset_index().values, columns=["country", "count"])
info_countries.head()

plt.figure(figsize=(12,6))
info[info["type"]=="Movie"]["release_year"].value_counts()[:30].plot(kind="bar",color="green")
plt.xlabel('Years')
plt.ylabel('Frequency of Movies')
plt.title("Frequency of Movies which were released in different years and are available on Netflix")

plt.figure(figsize=(12,6))
info[info["type"]=="TV Show"]["release_year"].value_counts()[:30].plot(kind="bar",color="pink")
plt.xlabel('Years')
plt.ylabel('Frequency of Movies')
plt.title("Frequency of TV shows which were released in different years and are available on Netflix")

plt.figure(figsize=(12,6))
info[info["type"]=="Movie"]["listed_in"].value_counts()[:10].plot(kind="barh",color="black")
plt.title("Top 10 Genres of Movies",size=18)

plt.figure(figsize=(12,6))
info[info["type"]=="TV Show"]["listed_in"].value_counts()[:10].plot(kind="barh",color="brown")
plt.title("Top 10 Genres of TV Shows",size=18)

from wordcloud import WordCloud

plt.subplots(figsize=(15,10))
wordcloud = WordCloud(
                          background_color='Black',
                          width=1600,
                          height=900
                         ).generate(" ".join(info.title))
plt.imshow(wordcloud)
plt.show()